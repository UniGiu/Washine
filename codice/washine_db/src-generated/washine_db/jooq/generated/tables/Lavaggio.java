/*
 * This file is generated by jOOQ.
 */
package washine_db.jooq.generated.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import washine_db.jooq.generated.DefaultSchema;
import washine_db.jooq.generated.Keys;
import washine_db.jooq.generated.tables.records.LavaggioRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Lavaggio extends TableImpl<LavaggioRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>LAVAGGIO</code>
     */
    public static final Lavaggio LAVAGGIO = new Lavaggio();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LavaggioRecord> getRecordType() {
        return LavaggioRecord.class;
    }

    /**
     * The column <code>LAVAGGIO.IdLavaggio</code>.
     */
    public final TableField<LavaggioRecord, String> IDLAVAGGIO = createField(DSL.name("IdLavaggio"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>LAVAGGIO.IdLavandaio</code>.
     */
    public final TableField<LavaggioRecord, String> IDLAVANDAIO = createField(DSL.name("IdLavandaio"), SQLDataType.CLOB.nullable(false), this, "");

    private Lavaggio(Name alias, Table<LavaggioRecord> aliased) {
        this(alias, aliased, null);
    }

    private Lavaggio(Name alias, Table<LavaggioRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>LAVAGGIO</code> table reference
     */
    public Lavaggio(String alias) {
        this(DSL.name(alias), LAVAGGIO);
    }

    /**
     * Create an aliased <code>LAVAGGIO</code> table reference
     */
    public Lavaggio(Name alias) {
        this(alias, LAVAGGIO);
    }

    /**
     * Create a <code>LAVAGGIO</code> table reference
     */
    public Lavaggio() {
        this(DSL.name("LAVAGGIO"), null);
    }

    public <O extends Record> Lavaggio(Table<O> child, ForeignKey<O, LavaggioRecord> key) {
        super(child, key, LAVAGGIO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<LavaggioRecord> getPrimaryKey() {
        return Keys.LAVAGGIO__PK_LAVAGGIO;
    }

    @Override
    public List<ForeignKey<LavaggioRecord, ?>> getReferences() {
        return Arrays.asList(Keys.LAVAGGIO__FK_LAVAGGIO_PK_UTENTE);
    }

    private transient Utente _utente;

    /**
     * Get the implicit join path to the <code>UTENTE</code> table.
     */
    public Utente utente() {
        if (_utente == null)
            _utente = new Utente(this, Keys.LAVAGGIO__FK_LAVAGGIO_PK_UTENTE);

        return _utente;
    }

    @Override
    public Lavaggio as(String alias) {
        return new Lavaggio(DSL.name(alias), this);
    }

    @Override
    public Lavaggio as(Name alias) {
        return new Lavaggio(alias, this);
    }

    @Override
    public Lavaggio as(Table<?> alias) {
        return new Lavaggio(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Lavaggio rename(String name) {
        return new Lavaggio(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Lavaggio rename(Name name) {
        return new Lavaggio(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Lavaggio rename(Table<?> name) {
        return new Lavaggio(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
