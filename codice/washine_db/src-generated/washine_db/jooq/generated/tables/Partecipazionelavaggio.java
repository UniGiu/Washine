/*
 * This file is generated by jOOQ.
 */
package washine_db.jooq.generated.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import washine_db.jooq.generated.DefaultSchema;
import washine_db.jooq.generated.Keys;
import washine_db.jooq.generated.tables.records.PartecipazionelavaggioRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Partecipazionelavaggio extends TableImpl<PartecipazionelavaggioRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PARTECIPAZIONELAVAGGIO</code>
     */
    public static final Partecipazionelavaggio PARTECIPAZIONELAVAGGIO = new Partecipazionelavaggio();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PartecipazionelavaggioRecord> getRecordType() {
        return PartecipazionelavaggioRecord.class;
    }

    /**
     * The column <code>PARTECIPAZIONELAVAGGIO.IdLavaggio</code>.
     */
    public final TableField<PartecipazionelavaggioRecord, String> IDLAVAGGIO = createField(DSL.name("IdLavaggio"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>PARTECIPAZIONELAVAGGIO.IdPartecipante</code>.
     */
    public final TableField<PartecipazionelavaggioRecord, String> IDPARTECIPANTE = createField(DSL.name("IdPartecipante"), SQLDataType.CLOB.nullable(false), this, "");

    private Partecipazionelavaggio(Name alias, Table<PartecipazionelavaggioRecord> aliased) {
        this(alias, aliased, null);
    }

    private Partecipazionelavaggio(Name alias, Table<PartecipazionelavaggioRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>PARTECIPAZIONELAVAGGIO</code> table reference
     */
    public Partecipazionelavaggio(String alias) {
        this(DSL.name(alias), PARTECIPAZIONELAVAGGIO);
    }

    /**
     * Create an aliased <code>PARTECIPAZIONELAVAGGIO</code> table reference
     */
    public Partecipazionelavaggio(Name alias) {
        this(alias, PARTECIPAZIONELAVAGGIO);
    }

    /**
     * Create a <code>PARTECIPAZIONELAVAGGIO</code> table reference
     */
    public Partecipazionelavaggio() {
        this(DSL.name("PARTECIPAZIONELAVAGGIO"), null);
    }

    public <O extends Record> Partecipazionelavaggio(Table<O> child, ForeignKey<O, PartecipazionelavaggioRecord> key) {
        super(child, key, PARTECIPAZIONELAVAGGIO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<PartecipazionelavaggioRecord> getPrimaryKey() {
        return Keys.PARTECIPAZIONELAVAGGIO__PK_PARTECIPAZIONELAVAGGIO;
    }

    @Override
    public List<ForeignKey<PartecipazionelavaggioRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PARTECIPAZIONELAVAGGIO__FK_PARTECIPAZIONELAVAGGIO_PK_LAVAGGIO, Keys.PARTECIPAZIONELAVAGGIO__FK_PARTECIPAZIONELAVAGGIO_PK_UTENTE);
    }

    private transient Lavaggio _lavaggio;
    private transient Utente _utente;

    /**
     * Get the implicit join path to the <code>LAVAGGIO</code> table.
     */
    public Lavaggio lavaggio() {
        if (_lavaggio == null)
            _lavaggio = new Lavaggio(this, Keys.PARTECIPAZIONELAVAGGIO__FK_PARTECIPAZIONELAVAGGIO_PK_LAVAGGIO);

        return _lavaggio;
    }

    /**
     * Get the implicit join path to the <code>UTENTE</code> table.
     */
    public Utente utente() {
        if (_utente == null)
            _utente = new Utente(this, Keys.PARTECIPAZIONELAVAGGIO__FK_PARTECIPAZIONELAVAGGIO_PK_UTENTE);

        return _utente;
    }

    @Override
    public Partecipazionelavaggio as(String alias) {
        return new Partecipazionelavaggio(DSL.name(alias), this);
    }

    @Override
    public Partecipazionelavaggio as(Name alias) {
        return new Partecipazionelavaggio(alias, this);
    }

    @Override
    public Partecipazionelavaggio as(Table<?> alias) {
        return new Partecipazionelavaggio(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Partecipazionelavaggio rename(String name) {
        return new Partecipazionelavaggio(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Partecipazionelavaggio rename(Name name) {
        return new Partecipazionelavaggio(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Partecipazionelavaggio rename(Table<?> name) {
        return new Partecipazionelavaggio(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
