/*
 * This file is generated by jOOQ.
 */
package washine_db.jooq.generated.tables.records;


import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

import washine_db.jooq.generated.tables.Invites;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class InvitesRecord extends UpdatableRecordImpl<InvitesRecord> implements Record4<String, String, String, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>INVITES.LaundryPersonId</code>.
     */
    public void setLaundrypersonid(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>INVITES.LaundryPersonId</code>.
     */
    public String getLaundrypersonid() {
        return (String) get(0);
    }

    /**
     * Setter for <code>INVITES.InvitedName</code>.
     */
    public void setInvitedname(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>INVITES.InvitedName</code>.
     */
    public String getInvitedname() {
        return (String) get(1);
    }

    /**
     * Setter for <code>INVITES.Code</code>.
     */
    public void setCode(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>INVITES.Code</code>.
     */
    public String getCode() {
        return (String) get(2);
    }

    /**
     * Setter for <code>INVITES.TS</code>.
     */
    public void setTs(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>INVITES.TS</code>.
     */
    public Integer getTs() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<String, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<String, String, String, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Invites.INVITES.LAUNDRYPERSONID;
    }

    @Override
    public Field<String> field2() {
        return Invites.INVITES.INVITEDNAME;
    }

    @Override
    public Field<String> field3() {
        return Invites.INVITES.CODE;
    }

    @Override
    public Field<Integer> field4() {
        return Invites.INVITES.TS;
    }

    @Override
    public String component1() {
        return getLaundrypersonid();
    }

    @Override
    public String component2() {
        return getInvitedname();
    }

    @Override
    public String component3() {
        return getCode();
    }

    @Override
    public Integer component4() {
        return getTs();
    }

    @Override
    public String value1() {
        return getLaundrypersonid();
    }

    @Override
    public String value2() {
        return getInvitedname();
    }

    @Override
    public String value3() {
        return getCode();
    }

    @Override
    public Integer value4() {
        return getTs();
    }

    @Override
    public InvitesRecord value1(String value) {
        setLaundrypersonid(value);
        return this;
    }

    @Override
    public InvitesRecord value2(String value) {
        setInvitedname(value);
        return this;
    }

    @Override
    public InvitesRecord value3(String value) {
        setCode(value);
        return this;
    }

    @Override
    public InvitesRecord value4(Integer value) {
        setTs(value);
        return this;
    }

    @Override
    public InvitesRecord values(String value1, String value2, String value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached InvitesRecord
     */
    public InvitesRecord() {
        super(Invites.INVITES);
    }

    /**
     * Create a detached, initialised InvitesRecord
     */
    public InvitesRecord(String laundrypersonid, String invitedname, String code, Integer ts) {
        super(Invites.INVITES);

        setLaundrypersonid(laundrypersonid);
        setInvitedname(invitedname);
        setCode(code);
        setTs(ts);
        resetChangedOnNotNull();
    }
}
