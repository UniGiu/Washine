/*
 * This file is generated by jOOQ.
 */
package washine_db.jooq.generated.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

import washine_db.jooq.generated.tables.Washing;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class WashingRecord extends UpdatableRecordImpl<WashingRecord> implements Record3<String, String, Boolean> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>WASHING.WashingId</code>.
     */
    public void setWashingid(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>WASHING.WashingId</code>.
     */
    public String getWashingid() {
        return (String) get(0);
    }

    /**
     * Setter for <code>WASHING.LaundryPersonId</code>.
     */
    public void setLaundrypersonid(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>WASHING.LaundryPersonId</code>.
     */
    public String getLaundrypersonid() {
        return (String) get(1);
    }

    /**
     * Setter for <code>WASHING.Active</code>.
     */
    public void setActive(Boolean value) {
        set(2, value);
    }

    /**
     * Getter for <code>WASHING.Active</code>.
     */
    public Boolean getActive() {
        return (Boolean) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, Boolean> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, String, Boolean> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Washing.WASHING.WASHINGID;
    }

    @Override
    public Field<String> field2() {
        return Washing.WASHING.LAUNDRYPERSONID;
    }

    @Override
    public Field<Boolean> field3() {
        return Washing.WASHING.ACTIVE;
    }

    @Override
    public String component1() {
        return getWashingid();
    }

    @Override
    public String component2() {
        return getLaundrypersonid();
    }

    @Override
    public Boolean component3() {
        return getActive();
    }

    @Override
    public String value1() {
        return getWashingid();
    }

    @Override
    public String value2() {
        return getLaundrypersonid();
    }

    @Override
    public Boolean value3() {
        return getActive();
    }

    @Override
    public WashingRecord value1(String value) {
        setWashingid(value);
        return this;
    }

    @Override
    public WashingRecord value2(String value) {
        setLaundrypersonid(value);
        return this;
    }

    @Override
    public WashingRecord value3(Boolean value) {
        setActive(value);
        return this;
    }

    @Override
    public WashingRecord values(String value1, String value2, Boolean value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached WashingRecord
     */
    public WashingRecord() {
        super(Washing.WASHING);
    }

    /**
     * Create a detached, initialised WashingRecord
     */
    public WashingRecord(String washingid, String laundrypersonid, Boolean active) {
        super(Washing.WASHING);

        setWashingid(washingid);
        setLaundrypersonid(laundrypersonid);
        setActive(active);
        resetChangedOnNotNull();
    }
}
