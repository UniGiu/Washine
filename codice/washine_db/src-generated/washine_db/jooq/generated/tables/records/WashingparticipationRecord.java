/*
 * This file is generated by jOOQ.
 */
package washine_db.jooq.generated.tables.records;


import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

import washine_db.jooq.generated.tables.Washingparticipation;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class WashingparticipationRecord extends UpdatableRecordImpl<WashingparticipationRecord> implements Record3<String, String, Double> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>WASHINGPARTICIPATION.WashingId</code>.
     */
    public void setWashingid(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>WASHINGPARTICIPATION.WashingId</code>.
     */
    public String getWashingid() {
        return (String) get(0);
    }

    /**
     * Setter for <code>WASHINGPARTICIPATION.ParticipantId</code>.
     */
    public void setParticipantid(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>WASHINGPARTICIPATION.ParticipantId</code>.
     */
    public String getParticipantid() {
        return (String) get(1);
    }

    /**
     * Setter for <code>WASHINGPARTICIPATION.Load</code>.
     */
    public void setLoad(Double value) {
        set(2, value);
    }

    /**
     * Getter for <code>WASHINGPARTICIPATION.Load</code>.
     */
    public Double getLoad() {
        return (Double) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<String, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, Double> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, String, Double> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Washingparticipation.WASHINGPARTICIPATION.WASHINGID;
    }

    @Override
    public Field<String> field2() {
        return Washingparticipation.WASHINGPARTICIPATION.PARTICIPANTID;
    }

    @Override
    public Field<Double> field3() {
        return Washingparticipation.WASHINGPARTICIPATION.LOAD;
    }

    @Override
    public String component1() {
        return getWashingid();
    }

    @Override
    public String component2() {
        return getParticipantid();
    }

    @Override
    public Double component3() {
        return getLoad();
    }

    @Override
    public String value1() {
        return getWashingid();
    }

    @Override
    public String value2() {
        return getParticipantid();
    }

    @Override
    public Double value3() {
        return getLoad();
    }

    @Override
    public WashingparticipationRecord value1(String value) {
        setWashingid(value);
        return this;
    }

    @Override
    public WashingparticipationRecord value2(String value) {
        setParticipantid(value);
        return this;
    }

    @Override
    public WashingparticipationRecord value3(Double value) {
        setLoad(value);
        return this;
    }

    @Override
    public WashingparticipationRecord values(String value1, String value2, Double value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached WashingparticipationRecord
     */
    public WashingparticipationRecord() {
        super(Washingparticipation.WASHINGPARTICIPATION);
    }

    /**
     * Create a detached, initialised WashingparticipationRecord
     */
    public WashingparticipationRecord(String washingid, String participantid, Double load) {
        super(Washingparticipation.WASHINGPARTICIPATION);

        setWashingid(washingid);
        setParticipantid(participantid);
        setLoad(load);
        resetChangedOnNotNull();
    }
}
