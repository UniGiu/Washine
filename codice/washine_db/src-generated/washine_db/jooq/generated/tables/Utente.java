/*
 * This file is generated by jOOQ.
 */
package washine_db.jooq.generated.tables;


import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import washine_db.jooq.generated.DefaultSchema;
import washine_db.jooq.generated.Keys;
import washine_db.jooq.generated.tables.records.UtenteRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Utente extends TableImpl<UtenteRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>UTENTE</code>
     */
    public static final Utente UTENTE = new Utente();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UtenteRecord> getRecordType() {
        return UtenteRecord.class;
    }

    /**
     * The column <code>UTENTE.Id</code>.
     */
    public final TableField<UtenteRecord, String> ID = createField(DSL.name("Id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>UTENTE.Email</code>.
     */
    public final TableField<UtenteRecord, String> EMAIL = createField(DSL.name("Email"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>UTENTE.Password</code>.
     */
    public final TableField<UtenteRecord, String> PASSWORD = createField(DSL.name("Password"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>UTENTE.Livello</code>.
     */
    public final TableField<UtenteRecord, Integer> LIVELLO = createField(DSL.name("Livello"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>UTENTE.Bloccato</code>.
     */
    public final TableField<UtenteRecord, Boolean> BLOCCATO = createField(DSL.name("Bloccato"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("FALSE"), SQLDataType.BOOLEAN)), this, "");

    private Utente(Name alias, Table<UtenteRecord> aliased) {
        this(alias, aliased, null);
    }

    private Utente(Name alias, Table<UtenteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>UTENTE</code> table reference
     */
    public Utente(String alias) {
        this(DSL.name(alias), UTENTE);
    }

    /**
     * Create an aliased <code>UTENTE</code> table reference
     */
    public Utente(Name alias) {
        this(alias, UTENTE);
    }

    /**
     * Create a <code>UTENTE</code> table reference
     */
    public Utente() {
        this(DSL.name("UTENTE"), null);
    }

    public <O extends Record> Utente(Table<O> child, ForeignKey<O, UtenteRecord> key) {
        super(child, key, UTENTE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<UtenteRecord> getPrimaryKey() {
        return Keys.UTENTE__PK_UTENTE;
    }

    @Override
    public Utente as(String alias) {
        return new Utente(DSL.name(alias), this);
    }

    @Override
    public Utente as(Name alias) {
        return new Utente(alias, this);
    }

    @Override
    public Utente as(Table<?> alias) {
        return new Utente(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Utente rename(String name) {
        return new Utente(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Utente rename(Name name) {
        return new Utente(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Utente rename(Table<?> name) {
        return new Utente(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, Integer, Boolean> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super String, ? super String, ? super String, ? super Integer, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super String, ? super String, ? super String, ? super Integer, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
