/*
 * This file is generated by jOOQ.
 */
package washine_db.jooq.generated.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import washine_db.jooq.generated.DefaultSchema;
import washine_db.jooq.generated.Keys;
import washine_db.jooq.generated.tables.records.ListautentigruppoRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Listautentigruppo extends TableImpl<ListautentigruppoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>LISTAUTENTIGRUPPO</code>
     */
    public static final Listautentigruppo LISTAUTENTIGRUPPO = new Listautentigruppo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ListautentigruppoRecord> getRecordType() {
        return ListautentigruppoRecord.class;
    }

    /**
     * The column <code>LISTAUTENTIGRUPPO.IdLavandaio</code>.
     */
    public final TableField<ListautentigruppoRecord, String> IDLAVANDAIO = createField(DSL.name("IdLavandaio"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>LISTAUTENTIGRUPPO.IdPartecipante</code>.
     */
    public final TableField<ListautentigruppoRecord, String> IDPARTECIPANTE = createField(DSL.name("IdPartecipante"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>LISTAUTENTIGRUPPO.Nome</code>.
     */
    public final TableField<ListautentigruppoRecord, String> NOME = createField(DSL.name("Nome"), SQLDataType.CLOB.nullable(false), this, "");

    private Listautentigruppo(Name alias, Table<ListautentigruppoRecord> aliased) {
        this(alias, aliased, null);
    }

    private Listautentigruppo(Name alias, Table<ListautentigruppoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>LISTAUTENTIGRUPPO</code> table reference
     */
    public Listautentigruppo(String alias) {
        this(DSL.name(alias), LISTAUTENTIGRUPPO);
    }

    /**
     * Create an aliased <code>LISTAUTENTIGRUPPO</code> table reference
     */
    public Listautentigruppo(Name alias) {
        this(alias, LISTAUTENTIGRUPPO);
    }

    /**
     * Create a <code>LISTAUTENTIGRUPPO</code> table reference
     */
    public Listautentigruppo() {
        this(DSL.name("LISTAUTENTIGRUPPO"), null);
    }

    public <O extends Record> Listautentigruppo(Table<O> child, ForeignKey<O, ListautentigruppoRecord> key) {
        super(child, key, LISTAUTENTIGRUPPO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ListautentigruppoRecord> getPrimaryKey() {
        return Keys.LISTAUTENTIGRUPPO__PK_LISTAUTENTIGRUPPO;
    }

    @Override
    public List<ForeignKey<ListautentigruppoRecord, ?>> getReferences() {
        return Arrays.asList(Keys.LISTAUTENTIGRUPPO__FK_LISTAUTENTIGRUPPO_PK_UTENTE);
    }

    private transient Utente _utente;

    /**
     * Get the implicit join path to the <code>UTENTE</code> table.
     */
    public Utente utente() {
        if (_utente == null)
            _utente = new Utente(this, Keys.LISTAUTENTIGRUPPO__FK_LISTAUTENTIGRUPPO_PK_UTENTE);

        return _utente;
    }

    @Override
    public Listautentigruppo as(String alias) {
        return new Listautentigruppo(DSL.name(alias), this);
    }

    @Override
    public Listautentigruppo as(Name alias) {
        return new Listautentigruppo(alias, this);
    }

    @Override
    public Listautentigruppo as(Table<?> alias) {
        return new Listautentigruppo(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Listautentigruppo rename(String name) {
        return new Listautentigruppo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Listautentigruppo rename(Name name) {
        return new Listautentigruppo(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Listautentigruppo rename(Table<?> name) {
        return new Listautentigruppo(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
