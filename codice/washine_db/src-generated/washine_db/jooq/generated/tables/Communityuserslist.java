/*
 * This file is generated by jOOQ.
 */
package washine_db.jooq.generated.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import washine_db.jooq.generated.DefaultSchema;
import washine_db.jooq.generated.Keys;
import washine_db.jooq.generated.tables.records.CommunityuserslistRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Communityuserslist extends TableImpl<CommunityuserslistRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>COMMUNITYUSERSLIST</code>
     */
    public static final Communityuserslist COMMUNITYUSERSLIST = new Communityuserslist();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CommunityuserslistRecord> getRecordType() {
        return CommunityuserslistRecord.class;
    }

    /**
     * The column <code>COMMUNITYUSERSLIST.LaundryPersonId</code>.
     */
    public final TableField<CommunityuserslistRecord, String> LAUNDRYPERSONID = createField(DSL.name("LaundryPersonId"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>COMMUNITYUSERSLIST.ParticipantId</code>.
     */
    public final TableField<CommunityuserslistRecord, String> PARTICIPANTID = createField(DSL.name("ParticipantId"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>COMMUNITYUSERSLIST.UserName</code>.
     */
    public final TableField<CommunityuserslistRecord, String> USERNAME = createField(DSL.name("UserName"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>COMMUNITYUSERSLIST.CommunityName</code>.
     */
    public final TableField<CommunityuserslistRecord, String> COMMUNITYNAME = createField(DSL.name("CommunityName"), SQLDataType.CLOB.nullable(false), this, "");

    private Communityuserslist(Name alias, Table<CommunityuserslistRecord> aliased) {
        this(alias, aliased, null);
    }

    private Communityuserslist(Name alias, Table<CommunityuserslistRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>COMMUNITYUSERSLIST</code> table reference
     */
    public Communityuserslist(String alias) {
        this(DSL.name(alias), COMMUNITYUSERSLIST);
    }

    /**
     * Create an aliased <code>COMMUNITYUSERSLIST</code> table reference
     */
    public Communityuserslist(Name alias) {
        this(alias, COMMUNITYUSERSLIST);
    }

    /**
     * Create a <code>COMMUNITYUSERSLIST</code> table reference
     */
    public Communityuserslist() {
        this(DSL.name("COMMUNITYUSERSLIST"), null);
    }

    public <O extends Record> Communityuserslist(Table<O> child, ForeignKey<O, CommunityuserslistRecord> key) {
        super(child, key, COMMUNITYUSERSLIST);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<CommunityuserslistRecord> getPrimaryKey() {
        return Keys.COMMUNITYUSERSLIST__PK_COMMUNITYUSERSLIST;
    }

    @Override
    public List<ForeignKey<CommunityuserslistRecord, ?>> getReferences() {
        return Arrays.asList(Keys.COMMUNITYUSERSLIST__FK_COMMUNITYUSERSLIST_PK_USER);
    }

    private transient User _user;

    /**
     * Get the implicit join path to the <code>USER</code> table.
     */
    public User user() {
        if (_user == null)
            _user = new User(this, Keys.COMMUNITYUSERSLIST__FK_COMMUNITYUSERSLIST_PK_USER);

        return _user;
    }

    @Override
    public Communityuserslist as(String alias) {
        return new Communityuserslist(DSL.name(alias), this);
    }

    @Override
    public Communityuserslist as(Name alias) {
        return new Communityuserslist(alias, this);
    }

    @Override
    public Communityuserslist as(Table<?> alias) {
        return new Communityuserslist(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Communityuserslist rename(String name) {
        return new Communityuserslist(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Communityuserslist rename(Name name) {
        return new Communityuserslist(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Communityuserslist rename(Table<?> name) {
        return new Communityuserslist(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
