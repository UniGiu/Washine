/*
 * This file is generated by jOOQ.
 */
package washine_db.jooq.generated.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import washine_db.jooq.generated.DefaultSchema;
import washine_db.jooq.generated.Keys;
import washine_db.jooq.generated.tables.records.GroupsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Groups extends TableImpl<GroupsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>GROUPS</code>
     */
    public static final Groups GROUPS = new Groups();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GroupsRecord> getRecordType() {
        return GroupsRecord.class;
    }

    /**
     * The column <code>GROUPS.UserId</code>.
     */
    public final TableField<GroupsRecord, String> USERID = createField(DSL.name("UserId"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>GROUPS.GroupName</code>.
     */
    public final TableField<GroupsRecord, String> GROUPNAME = createField(DSL.name("GroupName"), SQLDataType.CLOB.nullable(false), this, "");

    private Groups(Name alias, Table<GroupsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Groups(Name alias, Table<GroupsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>GROUPS</code> table reference
     */
    public Groups(String alias) {
        this(DSL.name(alias), GROUPS);
    }

    /**
     * Create an aliased <code>GROUPS</code> table reference
     */
    public Groups(Name alias) {
        this(alias, GROUPS);
    }

    /**
     * Create a <code>GROUPS</code> table reference
     */
    public Groups() {
        this(DSL.name("GROUPS"), null);
    }

    public <O extends Record> Groups(Table<O> child, ForeignKey<O, GroupsRecord> key) {
        super(child, key, GROUPS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<GroupsRecord> getPrimaryKey() {
        return Keys.GROUPS__PK_GROUPS;
    }

    @Override
    public List<ForeignKey<GroupsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.GROUPS__FK_GROUPS_PK_USER);
    }

    private transient User _user;

    /**
     * Get the implicit join path to the <code>USER</code> table.
     */
    public User user() {
        if (_user == null)
            _user = new User(this, Keys.GROUPS__FK_GROUPS_PK_USER);

        return _user;
    }

    @Override
    public Groups as(String alias) {
        return new Groups(DSL.name(alias), this);
    }

    @Override
    public Groups as(Name alias) {
        return new Groups(alias, this);
    }

    @Override
    public Groups as(Table<?> alias) {
        return new Groups(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Groups rename(String name) {
        return new Groups(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Groups rename(Name name) {
        return new Groups(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Groups rename(Table<?> name) {
        return new Groups(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
